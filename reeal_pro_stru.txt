study-ai-backend/
│
├── api/                          # API endpoints
│   ├── __init__.py
│   ├── courses.py                # Course management routes
│   ├── documents.py              # File upload processing
│   ├── quiz.py                   # Quiz generation routes
│   ├── users.py                  # Authentication & user management
│   ├── vocabulary.py             # Vocabulary endpoints
│   └── feedback.py               # Quiz feedback system
│
├── core/                         # Application core
│   ├── config.py                 # App configuration
│   ├── security.py               # Auth utilities
│   └── models.py                 # SQLAlchemy models
│
├── services/                     # Business logic
│   ├── ai_processing/            # AI-related services
│   │   ├── content_processor.py  # Text processing
│   │   ├── quiz_generator.py     # Quiz creation
│   │   └── vocabulary_builder.py # Term extraction
│   │
│   ├── course_service.py         # Course management
│   ├── document_service.py       # File processing
│   ├── feedback_service.py       # Feedback analysis
│   └── user_service.py           # User operations
│
├── schemas/                      # Pydantic models
│   ├── __init__.py
│   ├── courses.py                # Course schemas
│   ├── documents.py              # File schemas
│   ├── users.py                  # User schemas
│   ├── quiz.py                   # Quiz schemas
│   └── vocabulary.py             # Vocabulary schemas
│
├── utils/                        # Utilities
│   ├── file_handlers/            # File processing
│   │   ├── pdf_handler.py        # PDF-specific
│   │   ├── image_handler.py      # Image processing
│   │   └── video_handler.py      # Video processing
│   │
│   ├── ai_utils/                 # AI helpers
│   │   ├── ollama_client.py      # LLM interactions
│   │   └── embeddings.py         # Vector generation
│   │
│   ├── database.py               # DB utilities
│   └── helpers.py                # General utilities
│
├── tests/                        # Testing
│   ├── unit/                     # Unit tests
│   └── integration/              # Integration tests
│
├── static/                       # Static files
│   └── docs/                     # API documentation
│
├── temp_files/                   # Temporary storage
│   ├── uploads/                  # User uploads
│   └── processed/                # Processed files
│
├── main.py                       # App entry point
├── requirements.txt              # Dependencies
├── .env                          # Environment variables
└── README.md                     # Project documentation








from this text I quiz with this criteria:
3 questions
question type is mcq
-------
Big O notation is a way to describe the efficiency of an algorithm,
        specifically how its runtime or memory usage changes as the input size 
        grows. It's a way to compare the growth rates of different functions and 
        is primarily used in computer science to analyze algorithm complexity. In
        essence, it provides an upper bound on how an algorithm's resources 
        scale with the input.
        Here's a more detailed explanation:
        Asymptotic Analysis:
        Big O notation focuses on the asymptotic behavior of an algorithm, meaning how it performs 
        as the input size (n) approaches infinity.
        Growth Rate:
        It describes how the algorithm's runtime or space requirements increase as the input grows.  
        Worst-Case Scenario:
        Big O typically represents the worst-case scenario for an algorithm's performance, meaning it 
        describes the longest time or space it might require for a given input.
        Ignoring Constants:
        Big O notation generally ignores constant factors and focuses on the most significant term in 
        the complexity function. For example, O(2n) is considered the same as O(n) because the 
        constant 2 doesn't change the overall growth rate.    i want a quiz of mcq of 2 questions of medium difficulty in this formate 
---
Return ONLY a JSON array formatted like this:
    [
{{
        "question": "questions",
        "correct_answer": "answer",
        "choices": {"A": "3", "B": "4", "C": "5", "D": "6"},
}}, 
{{ 
        "question": "question",
        "correct_answer": "answer",
        "choices": {"A": "3", "B": "4", "C": "5", "D": "6"},
}}
    ]
